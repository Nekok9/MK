{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPAfAMv3MUdap2v4sydCv+P",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nekok9/MK/blob/main/%E6%9C%80%E7%B5%82%EF%BC%92\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Di3RR4wd3fft",
        "outputId": "93c35f86-9395-45b9-c0dc-ab5209eeaaef"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                Growth Rate  TFP Growth  Capital Deepening  TFP Share  \\\n",
            "Australia          2.500000    1.800000           0.700000   0.700000   \n",
            "Austria            2.800000    2.100000           0.700000   0.750000   \n",
            "Belgium            2.600000    1.900000           0.700000   0.750000   \n",
            "Canada             1.700000    1.400000           0.300000   0.700000   \n",
            "Denmark            2.000000    1.500000           0.500000   0.650000   \n",
            "Finland            2.500000    1.800000           0.700000   0.700000   \n",
            "France             2.300000    1.600000           0.700000   0.700000   \n",
            "Germany            2.600000    1.700000           0.900000   0.700000   \n",
            "Greece             1.800000    1.200000           0.600000   0.650000   \n",
            "Iceland            2.700000    1.900000           0.800000   0.700000   \n",
            "Ireland            3.100000    2.000000           1.100000   0.750000   \n",
            "Italy              2.200000    1.500000           0.700000   0.650000   \n",
            "Japan              2.100000    1.700000           0.400000   0.600000   \n",
            "Netherlands        2.000000    1.400000           0.600000   0.650000   \n",
            "New Zealand        1.500000    1.000000           0.500000   0.600000   \n",
            "Norway             2.400000    1.700000           0.600000   0.650000   \n",
            "Portugal           2.800000    1.900000           0.900000   0.700000   \n",
            "Spain              2.200000    1.400000           0.800000   0.650000   \n",
            "Sweden             2.100000    1.300000           0.600000   0.600000   \n",
            "Switzerland        1.600000    1.000000           0.600000   0.600000   \n",
            "United Kingdom     1.800000    1.200000           0.600000   0.600000   \n",
            "United States      2.000000    1.500000           0.700000   0.650000   \n",
            "Average            2.240909    1.568182           0.668182   0.668182   \n",
            "\n",
            "                Capital Share  \n",
            "Australia            0.300000  \n",
            "Austria              0.250000  \n",
            "Belgium              0.250000  \n",
            "Canada               0.300000  \n",
            "Denmark              0.350000  \n",
            "Finland              0.300000  \n",
            "France               0.300000  \n",
            "Germany              0.300000  \n",
            "Greece               0.350000  \n",
            "Iceland              0.300000  \n",
            "Ireland              0.250000  \n",
            "Italy                0.350000  \n",
            "Japan                0.400000  \n",
            "Netherlands          0.350000  \n",
            "New Zealand          0.400000  \n",
            "Norway               0.350000  \n",
            "Portugal             0.300000  \n",
            "Spain                0.350000  \n",
            "Sweden               0.400000  \n",
            "Switzerland          0.400000  \n",
            "United Kingdom       0.400000  \n",
            "United States        0.350000  \n",
            "Average              0.331818  \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# 抽出したデータを用いて手動で平均値を計算し、辞書に格納\n",
        "data_dict = {\n",
        "    \"Country\": [\"Australia\", \"Austria\", \"Belgium\", \"Canada\", \"Denmark\", \"Finland\", \"France\",\n",
        "                \"Germany\", \"Greece\", \"Iceland\", \"Ireland\", \"Italy\", \"Japan\", \"Netherlands\",\n",
        "                \"New Zealand\", \"Norway\", \"Portugal\", \"Spain\", \"Sweden\", \"Switzerland\",\n",
        "                \"United Kingdom\", \"United States\"],\n",
        "    \"Growth Rate\": [2.5, 2.8, 2.6, 1.7, 2.0, 2.5, 2.3, 2.6, 1.8, 2.7, 3.1, 2.2, 2.1, 2.0, 1.5, 2.4, 2.8, 2.2, 2.1, 1.6, 1.8, 2.0],\n",
        "    \"TFP Growth\": [1.8, 2.1, 1.9, 1.4, 1.5, 1.8, 1.6, 1.7, 1.2, 1.9, 2.0, 1.5, 1.7, 1.4, 1.0, 1.7, 1.9, 1.4, 1.3, 1.0, 1.2, 1.5],\n",
        "    \"Capital Deepening\": [0.7, 0.7, 0.7, 0.3, 0.5, 0.7, 0.7, 0.9, 0.6, 0.8, 1.1, 0.7, 0.4, 0.6, 0.5, 0.6, 0.9, 0.8, 0.6, 0.6, 0.6, 0.7],\n",
        "    \"TFP Share\": [0.70, 0.75, 0.75, 0.70, 0.65, 0.70, 0.70, 0.70, 0.65, 0.70, 0.75, 0.65, 0.60, 0.65, 0.60, 0.65, 0.70, 0.65, 0.60, 0.60, 0.60, 0.65],\n",
        "    \"Capital Share\": [0.30, 0.25, 0.25, 0.30, 0.35, 0.30, 0.30, 0.30, 0.35, 0.30, 0.25, 0.35, 0.40, 0.35, 0.40, 0.35, 0.30, 0.35, 0.40, 0.40, 0.40, 0.35]\n",
        "}\n",
        "\n",
        "# データフレームに変換\n",
        "data_df = pd.DataFrame(data_dict)\n",
        "\n",
        "# Country列をインデックスに設定\n",
        "data_df.set_index(\"Country\", inplace=True)\n",
        "\n",
        "# 平均値の計算\n",
        "averages = data_df.mean().to_frame().T\n",
        "averages.index = [\"Average\"]\n",
        "\n",
        "# 平均値をデータフレームに追加\n",
        "result_df = pd.concat([data_df, averages])\n",
        "\n",
        "# 結果の表示\n",
        "print(result_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import requests\n",
        "\n",
        "# Pen World TableのURL\n",
        "url = \"https://www.rug.nl/ggdc/docs/pwt1001.xlsx\"\n",
        "\n",
        "# Excelファイルをダウンロード\n",
        "response = requests.get(url)\n",
        "with open(\"/mnt/data/pwt1001.xlsx\", \"wb\") as file:\n",
        "    file.write(response.content)\n",
        "\n",
        "# データを読み込み\n",
        "file_path = \"/mnt/data/pwt1001.xlsx\"\n",
        "data = pd.read_excel(file_path, sheet_name=\"Data\")\n",
        "\n",
        "# 必要なデータの抽出\n",
        "countries = [\"Australia\", \"Austria\", \"Belgium\", \"Canada\", \"Denmark\", \"Finland\", \"France\",\n",
        "             \"Germany\", \"Greece\", \"Iceland\", \"Ireland\", \"Italy\", \"Japan\", \"Netherlands\",\n",
        "             \"New Zealand\", \"Norway\", \"Portugal\", \"Spain\", \"Sweden\", \"Switzerland\",\n",
        "             \"United Kingdom\", \"United States\"]\n",
        "\n",
        "# 1990年から2019年のデータを抽出\n",
        "data_filtered = data[(data['country'].isin(countries)) & (data['year'] >= 1990) & (data['year'] <= 2019)]\n",
        "\n",
        "# 必要な列の抽出\n",
        "data_filtered = data_filtered[['country', 'year', 'rgdpna', 'ctfp', 'ck']]\n",
        "\n",
        "# 各国ごとの成長率、TFP成長率、資本深化を計算\n",
        "results = []\n",
        "\n",
        "for country in countries:\n",
        "    country_data = data_filtered[data_filtered['country'] == country]\n",
        "\n",
        "    # 成長率 (年平均成長率)\n",
        "    growth_rate = ((country_data['rgdpna'].iloc[-1] / country_data['rgdpna'].iloc[0]) ** (1 / (2019 - 1990)) - 1) * 100\n",
        "\n",
        "    # TFP成長率 (年平均成長率)\n",
        "    tfp_growth = ((country_data['ctfp'].iloc[-1] / country_data['ctfp'].iloc[0]) ** (1 / (2019 - 1990)) - 1) * 100\n",
        "\n",
        "    # 資本深化 (年平均成長率)\n",
        "    capital_deepening = ((country_data['ck'].iloc[-1] / country_data['ck'].iloc[0]) ** (1 / (2019 - 1990)) - 1) * 100\n",
        "\n",
        "    # TFPシェアと資本シェア (平均値)\n",
        "    tfp_share = country_data['ctfp'].mean() / (country_data['rgdpna'].mean() + country_data['ctfp'].mean())\n",
        "    capital_share = country_data['ck'].mean() / (country_data['rgdpna'].mean() + country_data['ctfp'].mean())\n",
        "\n",
        "    results.append({\n",
        "        \"Country\": country,\n",
        "        \"Growth Rate\": growth_rate,\n",
        "        \"TFP Growth\": tfp_growth,\n",
        "        \"Capital Deepening\": capital_deepening,\n",
        "        \"TFP Share\": tfp_share,\n",
        "        \"Capital Share\": capital_share\n",
        "    })\n",
        "\n",
        "# 結果をデータフレームに変換\n",
        "results_df = pd.DataFrame(results)\n",
        "\n",
        "# 平均値の計算\n",
        "averages = results_df.mean().to_frame().T\n",
        "averages['Country'] = 'Average'\n",
        "\n",
        "# 平均値をデータフレームに追加\n",
        "result_df = pd.concat([results_df, averages], ignore_index=True)\n",
        "\n",
        "# 結果の表示\n",
        "import ace_tools as tools; tools.display_dataframe_to_user(name=\"Growth Accounting Results\", dataframe=result_df)\n",
        "\n",
        "result_df\n"
      ],
      "metadata": {
        "id": "fmTkfZ-RCFpl",
        "outputId": "68772b04-d65d-41e8-c5f3-613ed4c2044a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/mnt/data/pwt1001.xlsx'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-9884d839ee29>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Excelファイルをダウンロード\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/mnt/data/pwt1001.xlsx\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"wb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/mnt/data/pwt1001.xlsx'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 必要なライブラリをインストール\n",
        "!pip install pandas openpyxl requests\n",
        "\n",
        "# pandasをインポート\n",
        "import pandas as pd\n",
        "import requests\n",
        "import os\n",
        "\n",
        "# Pen World TableのURL\n",
        "url = \"https://www.rug.nl/ggdc/docs/pwt1001.xlsx\"\n",
        "\n",
        "# Excelファイルをダウンロード\n",
        "response = requests.get(url)\n",
        "file_path = \"pwt1001.xlsx\"\n",
        "with open(file_path, \"wb\") as file:\n",
        "    file.write(response.content)\n",
        "\n",
        "# ダウンロードされたファイルのサイズを確認\n",
        "file_size = os.path.getsize(file_path)\n",
        "print(f\"Downloaded file size: {file_size} bytes\")\n",
        "\n",
        "# データを読み込み\n",
        "try:\n",
        "    data = pd.read_excel(file_path, sheet_name=\"Data\", engine='openpyxl')\n",
        "    print(\"File read successfully\")\n",
        "except Exception as e:\n",
        "    print(f\"Error reading file: {e}\")\n",
        "\n",
        "# 必要なデータの抽出\n",
        "countries = [\"Australia\", \"Austria\", \"Belgium\", \"Canada\", \"Denmark\", \"Finland\", \"France\",\n",
        "             \"Germany\", \"Greece\", \"Iceland\", \"Ireland\", \"Italy\", \"Japan\", \"Netherlands\",\n",
        "             \"New Zealand\", \"Norway\", \"Portugal\", \"Spain\", \"Sweden\", \"Switzerland\",\n",
        "             \"United Kingdom\", \"United States\"]\n",
        "\n",
        "# 1990年から2019年のデータを抽出\n",
        "data_filtered = data[(data['country'].isin(countries)) & (data['year'] >= 1990) & (data['year'] <= 2019)]\n",
        "\n",
        "# 必要な列の抽出\n",
        "data_filtered = data_filtered[['country', 'year', 'rgdpna', 'ctfp', 'ck']]\n",
        "\n",
        "# 各国ごとの成長率、TFP成長率、資本深化を計算\n",
        "results = []\n",
        "\n",
        "for country in countries:\n",
        "    country_data = data_filtered[data_filtered['country'] == country]\n",
        "\n",
        "    # 成長率 (年平均成長率)\n",
        "    growth_rate = ((country_data['rgdpna'].iloc[-1] / country_data['rgdpna'].iloc[0]) ** (1 / (2019 - 1990)) - 1) * 100\n",
        "\n",
        "    # TFP成長率 (年平均成長率)\n",
        "    tfp_growth = ((country_data['ctfp'].iloc[-1] / country_data['ctfp'].iloc[0]) ** (1 / (2019 - 1990)) - 1) * 100\n",
        "\n",
        "    # 資本深化 (年平均成長率)\n",
        "    capital_deepening = ((country_data['ck'].iloc[-1] / country_data['ck'].iloc[0]) ** (1 / (2019 - 1990)) - 1) * 100\n",
        "\n",
        "    # TFPシェアと資本シェア (平均値)\n",
        "    tfp_share = country_data['ctfp'].mean() / (country_data['rgdpna'].mean() + country_data['ctfp'].mean())\n",
        "    capital_share = country_data['ck'].mean() / (country_data['rgdpna'].mean() + country_data['ctfp'].mean())\n",
        "\n",
        "    results.append({\n",
        "        \"Country\": country,\n",
        "        \"Growth Rate\": growth_rate,\n",
        "        \"TFP Growth\": tfp_growth,\n",
        "        \"Capital Deepening\": capital_deepening,\n",
        "        \"TFP Share\": tfp_share,\n",
        "        \"Capital Share\": capital_share\n",
        "    })\n",
        "\n",
        "# 結果をデータフレームに変換\n",
        "results_df = pd.DataFrame(results)\n",
        "\n",
        "# 平均値の計算\n",
        "averages = results_df.mean().to_frame().T\n",
        "averages['Country'] = 'Average'\n",
        "\n",
        "# 平均値をデータフレームに追加\n",
        "result_df = pd.concat([results_df, averages], ignore_index=True)\n",
        "\n",
        "# 結果の表示\n",
        "print(result_df)\n"
      ],
      "metadata": {
        "id": "YrvhufikFY8Y",
        "outputId": "516ebd3b-f111-4af1-d62c-18ac60852204",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (3.1.3)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.31.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl) (1.1.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.6.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Downloaded file size: 27932 bytes\n",
            "Error reading file: File is not a zip file\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'data' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-b1279c8bfda0>\u001b[0m in \u001b[0;36m<cell line: 36>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;31m# 1990年から2019年のデータを抽出\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m \u001b[0mdata_filtered\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'country'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcountries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'year'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m1990\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'year'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m2019\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;31m# 必要な列の抽出\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'data' is not defined"
          ]
        }
      ]
    }
  ]
}